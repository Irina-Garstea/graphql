import Head from "next/head";
import { ApolloClient, InMemoryCache, gql } from "@apollo/client";
import Image from "next/image";
import styles from "../styles/Home.module.css";

export default function Home({ review }) {
  console.log("review", review);
  return (
    <div className={styles.container}>
      <Head>
        <title>Testimonials</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Testimonials</h1>

        <p className={styles.description}>graphql API</p>

        <div className={styles.grid}>
          <a
            href="https://github.com/vercel/next.js/tree/master/examples"
            className={styles.card}
          >
            <h2>Examples &rarr;</h2>
            <p>Discover and deploy boilerplate example Next.js projects.</p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
          >
            <h2>Deploy &rarr;</h2>
            <p>
              Instantly deploy your Next.js site to a public URL with Vercel.
            </p>
          </a>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}

export async function getStaticProps() {
  const client = new ApolloClient({
    uri: "https://graphql.anilist.co",
    cache: new InMemoryCache(),
  });

  const { data } = await client.query({
    query: gql`
      query User($sort: [ReviewSort]) {
        Page {
          reviews(sort: $sort) {
            id
            userId
            summary
            user {
              name
              avatar {
                medium
              }
              options {
                titleLanguage
                profileColor
              }
            }
          }
        }
      }
    `,
  });

  console.log("data", data);
  return {
    props: {
      review: data.Page,
    },
  };
}
